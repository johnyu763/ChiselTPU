$date
2023-03-17T19:25+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module ChiselTPU $end
 $var wire 1 ! printf_24 $end
 $var wire 1 " printf_25 $end
 $var wire 1 # printf_20 $end
 $var wire 1 $ printf_21 $end
 $var wire 1 % printf_22 $end
 $var wire 1 & printf_23 $end
 $var wire 1 ' printf_17 $end
 $var wire 1 ( printf_18 $end
 $var wire 1 ) printf_19 $end
 $var wire 1 * printf_13 $end
 $var wire 1 + printf_14 $end
 $var wire 1 , printf_15 $end
 $var wire 1 - printf_16 $end
 $var wire 1 . printf_10 $end
 $var wire 1 / printf_11 $end
 $var wire 1 0 printf_12 $end
 $var wire 32 1 myOut_1_1 $end
 $var wire 32 2 myOut_1_0 $end
 $var wire 1 7 io_b_ready $end
 $var wire 1 = io_a_valid $end
 $var wire 32 ? io_a_bits_0_0 $end
 $var wire 1 @ enabledSyst $end
 $var wire 1 E clock $end
 $var wire 32 F paddedA_1_0 $end
 $var wire 32 G paddedA_1_1 $end
 $var wire 1 H io_a_ready $end
 $var wire 3 K state $end
 $var wire 32 M io_b_bits_0_1 $end
 $var wire 32 O io_b_bits_0_0 $end
 $var wire 32 P paddedB_1_1 $end
 $var wire 32 Q paddedB_1_0 $end
 $var wire 1 T outReg $end
 $var wire 1 Y counterFlag $end
 $var wire 1 Z wrap_wrap $end
 $var wire 3 [ boundK $end
 $var wire 3 \ boundM $end
 $var wire 3 ] boundN $end
 $var wire 1 ^ b_ready $end
 $var wire 32 _ io_out_0_0 $end
 $var wire 1 ` reset $end
 $var wire 32 a io_out_0_1 $end
 $var wire 32 c slicedB_1_1 $end
 $var wire 32 d slicedB_1_0 $end
 $var wire 1 e a_ready $end
 $var wire 32 f slicedA_1_1 $end
 $var wire 32 g slicedA_1_0 $end
 $var wire 32 h slicedOut_0_0 $end
 $var wire 32 i slicedOut_0_1 $end
 $var wire 32 j myOut_0_1 $end
 $var wire 32 k myOut_0_0 $end
 $var wire 10 p totalCycle $end
 $var wire 1 t allowReadB $end
 $var wire 1 u sliceCycle $end
 $var wire 32 w io_a_bits_1_1 $end
 $var wire 32 x io_a_bits_1_0 $end
 $var wire 3 | cycle $end
 $var wire 1 "! wrap_wrap_1 $end
 $var wire 1 "" actReg $end
 $var wire 32 "# paddedA_0_1 $end
 $var wire 32 "$ paddedA_0_0 $end
 $var wire 1 "% systArr $end
 $var wire 32 "& slicedA_0_1 $end
 $var wire 32 "' slicedA_0_0 $end
 $var wire 32 "( paddedB_0_0 $end
 $var wire 32 ") paddedB_0_1 $end
 $var wire 1 "1 io_b_valid $end
 $var wire 1 "2 printf_9 $end
 $var wire 1 "3 printf_8 $end
 $var wire 1 "4 printf_7 $end
 $var wire 1 "5 printf_6 $end
 $var wire 1 "6 printf_1 $end
 $var wire 1 "7 printf_5 $end
 $var wire 1 "8 printf_4 $end
 $var wire 1 "9 printf_3 $end
 $var wire 1 ": printf_2 $end
 $var wire 1 "; printf $end
 $var wire 32 "< io_a_bits_0_1 $end
 $var wire 32 "> io_out_1_0 $end
 $var wire 32 "? io_out_1_1 $end
 $var wire 32 "@ slicedOut_1_0 $end
 $var wire 32 "A slicedB_0_1 $end
 $var wire 32 "B slicedB_0_0 $end
 $var wire 32 "C io_b_bits_1_1 $end
 $var wire 32 "D io_b_bits_1_0 $end
 $var wire 32 "E slicedOut_1_1 $end
  $scope module outReg $end
   $var wire 32 3 slicedOut_1_0 $end
   $var wire 32 4 slicedOut_1_1 $end
   $var wire 32 8 io_slicedOut_0_1 $end
   $var wire 32 9 io_slicedOut_0_0 $end
   $var wire 32 : cycleIdx $end
   $var wire 1 < clock $end
   $var wire 1 > reset $end
   $var wire 32 L io_systArr_out_0 $end
   $var wire 32 N io_systArr_out_1 $end
   $var wire 3 X io_cycle $end
   $var wire 32 l slicedOut_0_1 $end
   $var wire 32 m slicedOut_0_0 $end
   $var wire 32 } io_slicedOut_1_1 $end
   $var wire 32 ~ io_slicedOut_1_0 $end
  $upscope $end
  $scope module systArr $end
   $var wire 32 5 b_reg_1_0 $end
   $var wire 32 6 b_reg_1_1 $end
   $var wire 32 C cmp_input_1_1 $end
   $var wire 32 D cmp_input_1_0 $end
   $var wire 32 I io_b_in_1_0 $end
   $var wire 32 J io_b_in_1_1 $end
   $var wire 32 R cms_reg_1_1 $end
   $var wire 32 S cms_reg_1_0 $end
   $var wire 32 W a_reg_1_0 $end
   $var wire 1 b io_b_readingin $end
   $var wire 32 n io_a_in_0 $end
   $var wire 32 o io_a_in_1 $end
   $var wire 1 q clock $end
   $var wire 32 r b_reg_0_0 $end
   $var wire 32 s b_reg_0_1 $end
   $var wire 32 v cmp_input_0_0 $end
   $var wire 32 y io_out_1 $end
   $var wire 32 z io_out_0 $end
   $var wire 32 { cmp_input_0_1 $end
   $var wire 32 "* cms_reg_0_0 $end
   $var wire 32 "+ cms_reg_0_1 $end
   $var wire 32 ". io_b_in_0_0 $end
   $var wire 32 "/ io_b_in_0_1 $end
   $var wire 32 "0 a_reg_0_0 $end
   $var wire 1 "= io_en $end
  $upscope $end
  $scope module actReg $end
   $var wire 3 ; io_index $end
   $var wire 32 A io_a_out_1 $end
   $var wire 32 B io_a_out_0 $end
   $var wire 32 U io_a_0_1 $end
   $var wire 32 V io_a_0_0 $end
   $var wire 32 ", io_a_1_1 $end
   $var wire 32 "- io_a_1_0 $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 "/
00
b00000000000000000000000000000000 ".
b00000000000000000000000000000000 "-
b00000000000000000000000000000000 ",
b00000000000000000000000000000000 "0
07
b00000000000000000000000000000000 "'
b00000000000000000000000000000000 "&
b00000000000000000000000000000000 "$
b00000000000000000000000000000000 "+
0<
b00000000000000000000000000000000 "*
0=
b00000000000000000000000000000000 ")
0>
b00000000000000000000000000000000 "(
b00000000000000000000000000000000 "?
0@
b00000000000000000000000000000000 ">
b00000000000000000000000000000000 :
b00000000000000000000000000000000 "<
b00000000000000000000000000000000 "C
b00000000000000000000000000000000 "B
0E
b00000000000000000000000000000000 6
b00000000000000000000000000000000 "A
b00000000000000000000000000000000 9
b00000000000000000000000000000000 "@
b00000000000000000000000000000000 8
0H
b00000000000000000000000000000000 3
b00000000000000000000000000000000 2
b00000000000000000000000000000000 5
b00000000000000000000000000000000 4
b00000000000000000000000000000000 1
0T
0Y
b00000000000000000000000000000000 "E
0Z
b00000000000000000000000000000000 "D
0^
0`
0b
0e
0q
0t
0u
b0000000000 p
0"!
0""
0"%
b00000000000000000000000000000000 "#
0"1
0"2
0"3
0"4
0"5
0"6
0"7
0"8
0"9
0":
0";
0"=
b000 |
b00000000000000000000000000000000 ~
b000 X
b000 [
b000 ]
b000 \
b00000000000000000000000000000000 k
b00000000000000000000000000000000 j
b00000000000000000000000000000000 m
b00000000000000000000000000000000 l
b00000000000000000000000000000000 g
b00000000000000000000000000000000 f
b00000000000000000000000000000000 i
b00000000000000000000000000000000 h
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b000 K
b00000000000000000000000000000000 _
b00000000000000000000000000000000 a
b00000000000000000000000000000000 {
b00000000000000000000000000000000 z
b00000000000000000000000000000000 }
b00000000000000000000000000000000 w
b00000000000000000000000000000000 v
b00000000000000000000000000000000 y
b00000000000000000000000000000000 x
b00000000000000000000000000000000 s
b00000000000000000000000000000000 r
b000 ;
b00000000000000000000000000000000 o
b00000000000000000000000000000000 n
b00000000000000000000000000000000 J
b00000000000000000000000000000000 M
b00000000000000000000000000000000 L
b00000000000000000000000000000000 G
b00000000000000000000000000000000 F
b00000000000000000000000000000000 I
b00000000000000000000000000000000 C
b00000000000000000000000000000000 B
b00000000000000000000000000000000 D
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 A
0!
0"
0#
0$
b00000000000000000000000000000000 W
0%
b00000000000000000000000000000000 V
0&
0'
0(
b00000000000000000000000000000000 S
0)
b00000000000000000000000000000000 R
0*
b00000000000000000000000000000000 U
0+
0,
b00000000000000000000000000000000 O
0-
b00000000000000000000000000000000 N
0.
b00000000000000000000000000000000 Q
0/
b00000000000000000000000000000000 P
$end
#0
1`
b011 ;
1>
